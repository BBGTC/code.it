/**
 * Heavily based on urql's ssr
 * https://github.com/FormidableLabs/urql/blob/main/packages/next-urql/src/with-urql-client.ts
 */
import { QueryClient } from '@tanstack/react-query';
import type { CreateTRPCClientOptions } from '@trpc/client';
import { TRPCClientError } from '@trpc/react';
import type { AnyRouter, ResponseMeta } from '@trpc/server';
import { NextComponentType, NextPageContext } from 'next/dist/shared/lib/utils';
declare type QueryClientConfig = ConstructorParameters<typeof QueryClient>[0];
export declare type WithTRPCConfig<TRouter extends AnyRouter> = CreateTRPCClientOptions<TRouter> & {
    queryClientConfig?: QueryClientConfig;
    abortOnUnmount?: boolean;
};
interface WithTRPCOptions<TRouter extends AnyRouter> {
    config: (info: {
        ctx?: NextPageContext;
    }) => WithTRPCConfig<TRouter>;
}
export interface WithTRPCSSROptions<TRouter extends AnyRouter> extends WithTRPCOptions<TRouter> {
    ssr: true;
    responseMeta?: (opts: {
        ctx: NextPageContext;
        clientErrors: TRPCClientError<TRouter>[];
    }) => ResponseMeta;
}
export interface WithTRPCNoSSROptions<TRouter extends AnyRouter> extends WithTRPCOptions<TRouter> {
    ssr?: false;
}
export declare function withTRPC<TRouter extends AnyRouter, TSSRContext extends NextPageContext = NextPageContext>(opts: WithTRPCNoSSROptions<TRouter> | WithTRPCSSROptions<TRouter>): (AppOrPage: NextComponentType<any, any, any>) => NextComponentType;
export {};
//# sourceMappingURL=withTRPC.d.ts.map